package application;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import javax.activation.DataSource;

import com.j256.ormlite.jdbc.DataSourceConnectionSource;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import com.j256.ormlite.jdbc.JdbcPooledConnectionSource;
import com.password4j.BCryptFunction;
import com.password4j.Hash;
import com.password4j.Password;
import com.password4j.types.BCrypt;

import application.controller.DriversController;
import application.controller.ScheduleController;
import application.view.Application_view_controller;
import application.view.Login_view_controller;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;

public class Main extends Application {

	private Stage primaryStage;
	private BorderPane applicationWindowRoot;
	public JdbcConnectionSource dataBaseConnection;
	private static String DATABASE_URL = "jdbc:sqlserver://localhost:1433; databaseName=evidence; integratedSecurity=true";

	// ³¹czenie z baz¹ danych
	@Override
	public void init() throws Exception {
		// TODO Auto-generated method stub
		super.init();
		try {
			dataBaseConnection = new JdbcConnectionSource(DATABASE_URL);
			System.out.println("Po³¹czono z baz¹ danych");

			// klasa algorytmu BCrypt
			BCryptFunction myBcrypt = BCryptFunction.getInstance(BCrypt.Y, 11);

			// tworzenie hasha na podstawie Stringa
			Hash hash = Password.hash("has³o").with(myBcrypt);

			// zwraca Stringa
			System.out.println(hash.getResult());

		} catch (SQLException e) {
			System.err.println("Brak mo¿liwoœci po³¹czenia z baz¹ danych");
			e.printStackTrace();
		}
	}

	// Zamykanie po³¹czenia

	@Override
	public void stop() throws Exception {
		// TODO Auto-generated method stub
		super.stop();
		try {
			if (dataBaseConnection != null)
				dataBaseConnection.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// g³owna metoda, tworzenie pierwszego okna
	@Override
	public void start(Stage primaryStage) {

		this.primaryStage = primaryStage;

		try {
			FXMLLoader loader = new FXMLLoader(Main.class.getResource("view/Login_view.fxml"));
			GridPane root = (GridPane) loader.load();
			Login_view_controller controller = loader.getController();

			controller.setmainapp(this);

			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public void showapplication() {

		// otworzenie okna aplikacji

		try {
			FXMLLoader loader = new FXMLLoader(Main.class.getResource("view/Application_view.fxml"));
			applicationWindowRoot = (BorderPane) loader.load();

			Application_view_controller controller = loader.getController();

			controller.setmainapp(this);

			showMainPage();

			Scene scene = new Scene(applicationWindowRoot);
			primaryStage.setScene(scene);
			primaryStage.show();

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// otworzenie strony g³ównej w oknie aplikacji

	public void showMainPage() {

		try {

			FXMLLoader loader1 = new FXMLLoader(Main.class.getResource("view/MainPage_view.fxml"));
			BorderPane root1 = (BorderPane) loader1.load();

			applicationWindowRoot.setCenter(root1);

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public void showRaportPage() {

		try {

			FXMLLoader loader1 = new FXMLLoader(Main.class.getResource("view/Raport_view.fxml"));
			BorderPane root1 = (BorderPane) loader1.load();

			applicationWindowRoot.setCenter(root1);

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public static void main(String[] args) {
		launch(args);
	}

}
