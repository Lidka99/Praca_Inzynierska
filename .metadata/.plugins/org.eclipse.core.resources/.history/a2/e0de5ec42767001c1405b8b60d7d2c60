package application.controller;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import com.password4j.BCryptFunction;
import com.password4j.types.BCrypt;

import application.model.*;

public class TrailersController {
	
	private Dao<Trailers, Integer> trailersDao;

	private JdbcConnectionSource dataSourceConnection;

	public TrailersController(JdbcConnectionSource dataSourceConnection) {

		this.dataSourceConnection = dataSourceConnection;

		try {
			trailersDao = DaoManager.createDao(dataSourceConnection, Trailers.class);
			System.out.println(trailersDao.countOf());
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	public Trailers getByTrailerNumber(String trailersNumber) {
		for (Trailers trailer : trailersDao) {

			if(trailersNumber.toLowerCase().equals(trailer.getTrailer_number().toLowerCase())) {
				return trailer;
			}
		}
		
		return null;
	}
	
	public List<Trailers> getAllTrailers() {

		List<Trailers> allTrailers = new ArrayList<Trailers>();

		for (Trailers trailer : trailersDao) {

			allTrailers.add(trailer);
		}

		return allTrailers;
	}

	// tworzenie u¿ytkowników

	public boolean create(Users.Role role, String name, String surname, String username, String password_hash,
			String email) {
		Users newUser = new Users(role, name, surname, username, password_hash, email);
		try {
			usersDao.create(newUser);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		return true;
	}

	// edycja u¿ytkowników

	public boolean update(int id, Users.Role role, String name, String surname, String username, String password_hash,
			String email) {

		Users user = getUser(id);
		user.setRole(role);
		user.setName(name);
		user.setSurname(surname);
		user.setUsername(username);
		if (password_hash != null)
			user.setPassword_hash(password_hash);
		user.setEmail(email);

		try {
			usersDao.update(user);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		return true;
	}

	// usuwanie u¿ytkowników

	public boolean delete(int id) {

		Users user = getUser(id);
		return delete(user);

	}

	public boolean delete(Users user) {

		if (user != null) {

			try {
				usersDao.delete(user);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return false;
			}
			return true;

		}
		return false;
	}

	public Users getUser(int id) {

		for (Users user : usersDao) {

			if (id == user.getId()) {

				return user;
			}
		}
		return null;
	}

	public List<Users> getAllUsers() {

		List<Users> allUsers = new ArrayList<Users>();

		for (Users user : usersDao) {

			allUsers.add(new Users(user));
		}

		return allUsers;
	}

	public List<Users> searchUsersbySurname(String text) {

		List<Users> allUsers = new ArrayList<Users>();

		for (Users user : usersDao) {

			if (user.getSurname().toLowerCase().startsWith(text.toLowerCase()))

				allUsers.add(new Users(user));
		}

		return allUsers;
	}


	// sprawdzanie czy istnieje naczepa o danym nr rejestracyjnym

	public boolean checkUsername(String trailerNumber, int ignoredId) {

		for (Trailers trailer : trailersDao) {

			if (trailerNumber.equals(trailer.getTrailer_number()) && trailer.getId() != ignoredId) {

				return true;
			}

		}

		return false;
	}

}
