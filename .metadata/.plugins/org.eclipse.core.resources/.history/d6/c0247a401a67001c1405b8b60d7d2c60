package application.view;

import java.sql.Driver;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.time.FastDateParser;

import com.password4j.BCryptFunction;
import com.password4j.Hash;
import com.password4j.Password;
import com.password4j.types.BCrypt;

import application.Main;
import application.controller.DriversController;
import application.controller.ScheduleController;
import application.controller.UsersController;
import application.model.Drivers;
import application.model.Schedule;
import application.model.Trailers;
import application.model.Trucks;
import application.model.Users;
import application.view.AdminPanelUsersViewController.EditingMode;
import application.view.AdminPanelUsersViewController.ValidatingStatus;
import application.view.intermediate.Converter;
import application.view.intermediate.ScheduleIntermediate;
import javafx.collections.ListChangeListener;
import javafx.collections.ListChangeListener.Change;
import javafx.fxml.FXML;

import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;
import javafx.scene.control.cell.PropertyValueFactory;

public class AdminPanelTrucksViewController {

	@FXML
	private TableView trucksTableView;
	
	@FXML
	private TextField licenceNumberInputField;
	@FXML
	private TextField brandInputField;
	@FXML
	private TextField modelInputField;
	@FXML
	private TextField maxLoadInputField;

	@FXML
	private ChoiceBox driverChoiceBox;

	@FXML
	private ChoiceBox trailerChoiceBox;

	@FXML
	private TextField searchingInputField;

	private EditingMode editingMode = EditingMode.none;

	@FXML
	private Button addButton;
	@FXML
	private Button editButton;
	@FXML
	private Button deleteButton;

	private Main main;

	private ListChangeListener<Trucks> selectionListener;

	private List<Drivers> filteredDrivers;
	private List<Trailers> filteredTrailers;
	
	private Trucks selectedTruck;

	public void onDeleteButtonClick() {

		main.getTrucksController().delete(selectedTruck.getId());
		updateTableView();
		clearScheduleFields();

	}

	public void onCreateButtonCick() {

		clearScheduleFields();
		enableTableView(false);
		enableEditButttons(false);
		editingMode = EditingMode.adding;
		enableInputFields(true);

	}

	public void onEditButtonCick() {

		enableTableView(false);
		enableEditButttons(false);
		editingMode = EditingMode.editing;
		enableInputFields(true);

	}

	public void onSaveButtonCick() {

		switch (editingMode) {
		case adding: {

			String licenceNumber = licenceNumberInputField.getText();
			String brand =  brandInputField.getText();
			String model = modelInputField.getText();
			String maxLoad = maxLoadInputField.getText(); //tutaj nie wiem jak zrobic intem
			
			Drivers driver = filteredDrivers.get(driverChoiceBox.getSelectionModel().getSelectedIndex());
			Trailers trailer = filteredTrailers.get(trailerChoiceBox.getSelectionModel().getSelectedIndex());
			

		
			main.getTrucksController().create(licenceNumber, brand, model, maxLoad, driver, trailer);

		}

			break;

		case editing: {

			String licenceNumber = licenceNumberInputField.getText();
			String brand =  brandInputField.getText();
			String model = modelInputField.getText();
			String maxLoad = maxLoadInputField.getText(); //tutaj nie wiem jak zrobic intem
			
			Drivers driver = filteredDrivers.get(driverChoiceBox.getSelectionModel().getSelectedIndex());
			Trailers trailer = filteredTrailers.get(trailerChoiceBox.getSelectionModel().getSelectedIndex());
			

			main.getTrucksController().create(licenceNumber, brand, model, maxLoad, driver, trailer);
		}

			break;

		default:
			break;
		}

		clearScheduleFields();
		updateTableView();
		enableTableView(true);
		enableEditButttons(true);
		enableInputFields(false);
		editingMode = EditingMode.none;

	}

	
	public void onCancelButtonCick() {

		clearScheduleFields();
		updateTableView();
		enableTableView(true);
		enableEditButttons(true);
		editingMode = EditingMode.none;
		enableInputFields(false);

	}

	public void enableInputFields(boolean enabled) {

		licenceNumberInputField.setDisable(!enabled);
		brandInputField.setDisable(!enabled);
		modelInputField.setDisable(!enabled);
		maxLoadInputField.setDisable(!enabled);
		driverChoiceBox.setDisable(!enabled);
		trailerChoiceBox.setDisable(!enabled);

	}

	public void setUp() {

		// dodawanie kolumny id
		TableColumn<ScheduleIntermediate, Integer> column1 = new TableColumn("Id");
		column1.setCellValueFactory(new PropertyValueFactory("id"));
		scheduleTableView.getColumns().add(column1);

		// dodawanie kolumny marka
		TableColumn<ScheduleIntermediate, String> column2 = new TableColumn("Planowana data przyjazdu");
		column2.setCellValueFactory(new PropertyValueFactory("scheduled_date"));
		scheduleTableView.getColumns().add(column2);

		// dodawanie kolumny model
		TableColumn<ScheduleIntermediate, String> column5 = new TableColumn("Rodzaj");
		column5.setCellValueFactory(new PropertyValueFactory("type"));
		scheduleTableView.getColumns().add(column5);

		// dodawanie kolumny nr rejestracyjny ciê¿arówki
		TableColumn<ScheduleIntermediate, String> column6 = new TableColumn("Imiê kierowcy");
		column6.setCellValueFactory(new PropertyValueFactory("driverName"));
		scheduleTableView.getColumns().add(column6);

		// dodawanie kolumny maksymalna ³adownoœæ
		TableColumn<ScheduleIntermediate, String> column7 = new TableColumn("Nazwisko kierowcy");
		column7.setCellValueFactory(new PropertyValueFactory("driverSurname"));
		scheduleTableView.getColumns().add(column7);

		
		// dodawanie kolumny nr rejestracyjny naczepy
		TableColumn<ScheduleIntermediate, String> column9 = new TableColumn("Nr rejestracyjny auta");
		column9.setCellValueFactory(new PropertyValueFactory("truckLicenceNumber"));
		scheduleTableView.getColumns().add(column9);
		
		// dodawanie kolumny imie kierowcy
		TableColumn<ScheduleIntermediate, String> column9 = new TableColumn("Nr rejestracyjny auta");
		column9.setCellValueFactory(new PropertyValueFactory("truckLicenceNumber"));
		scheduleTableView.getColumns().add(column9);
				
		// dodawanie kolumny nazwisko kierowcy
		TableColumn<ScheduleIntermediate, String> column9 = new TableColumn("Nr rejestracyjny auta");
		column9.setCellValueFactory(new PropertyValueFactory("truckLicenceNumber"));
		scheduleTableView.getColumns().add(column9);

		updateTableView();

		enableInputFields(false);

		updateFilteredLists();

				// tworzymy tzw "nas³uchiwacz"

		if (selectionListener == null) {
			selectionListener = new ListChangeListener<Trucks>() {
				public void onChanged(Change<?extendsTrucks> change) {
					if (change.getList() != null && change.getList().size() > 0) {

						onSelectedTruck(change.getList().get(0));

					}
				}

			};
		}
		enableTableView(true);
	}


	// zaczynamy lub przestajemy nas³uchiwac

	private void enableTableView(boolean enabled) {

		if (enabled) {
			trucksTableView.getSelectionModel().getSelectedItems().addListener(selectionListener);
		} else {
			trucksTableView.getSelectionModel().getSelectedItems().removeListener(selectionListener);
		}

	}

	private void enableEditButttons(boolean enabled) {

		addButton.setDisable(!enabled);
		editButton.setDisable(!enabled);
		deleteButton.setDisable(!enabled);

	}

		private void onSelectedSchedule(ScheduleIntermediate schedule) {

			selectedSchedule = schedule;
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
			scheduledDateDatePicker.setValue(LocalDate.parse(schedule.getScheduled_date(), formatter));
			typeChoiceBox.setValue(Schedule.Type.valueOf(schedule.getType()));

			updateFilteredLists(false);

			int driverIndex;

			for (driverIndex = 0; driverIndex < filteredDrivers.size(); driverIndex++) {

				if (filteredDrivers.get(driverIndex).getId() == schedule.getDriver().getId())
					break;

			}
			driverChoiceBox.getSelectionModel().select(driverIndex);

			int truckIndex;

			for (truckIndex = 0; truckIndex < filteredTrucks.size(); truckIndex++) {

				if (filteredTrucks.get(truckIndex).getId() == schedule.getTruck().getId())
					break;

			}
			truckChoiceBox.getSelectionModel().select(truckIndex);

			int trailerIndex;

			for (trailerIndex = 0; trailerIndex < filteredTrailers.size(); trailerIndex++) {

				if (filteredTrailers.get(trailerIndex).getId() == schedule.getTrailer().getId())
					break;

			}
			trailerChoiceBox.getSelectionModel().select(trailerIndex);

		}
	
	private void clearTruckFields() {

		licenceNumberInputField.setText(null);
		brandInputField.setText(null);
		modelInputField.setText(null);
		maxLoadInputField.setText(null);
		driverChoiceBox.setValue(null);
		trailerChoiceBox.setValue(null);
		editButton.setDisable(true);

	}

	private void updateTableView() {

		UsersController controller = main.getUsersController();

		List<Trucks> AllTrucks = controller.searchTruckbyDrivingLicence(searchingInputField.getText());

		trucksTableView.getItems().clear();

		for (Trucks truck : AllTrucks) {

			trucksTableView.getItems().add(truck);
		}
	}



	private void updateFilteredLists() {
		updateFilteredLists(true);
	}

	private void updateFilteredLists(boolean useFilters) {

		filteredDrivers = main.getDriversController().getAllDrivers();

		
		filteredTrailers = main.getTrailersController().getAllTrailers();
		
		driverChoiceBox.getItems().clear();

		for (Drivers driver : filteredDrivers) {
			driverChoiceBox.getItems()
					.add(driver.getName() + " " + driver.getSurname() + " " + driver.getDriving_license());
		}
		
				
		trailerChoiceBox.getItems().clear();

		for (Trailers trailer : filteredTrailers) {
			trailerChoiceBox.getItems().add(trailer.getTrailer_number() + " " + trailer.getTrailer_type());
		}

	}

	public void setmainapp(Main main) {

		this.main = main;

	}

	public enum EditingMode {
		adding, editing, none
	}

	

}
